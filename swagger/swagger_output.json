{
  "openapi": "3.0.3",
  "info": {
    "title": "Currency converter",
    "description": "This is a currency converter made as pre-requirement of a selection proccess at [Jaya](https://jaya.tech/) based on the exchangeratesapi.\nYou can get a key at [https://exchangeratesapi.io/](https://exchangeratesapi.io/).",
    "contact": {
      "email": "digicabral@gmail.com"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Github project",
    "url": "https://github.com/digicabral/currency-converter"
  },
  "servers": [
    {
      "url": "https://currency-converter-22.herokuapp.com",
      "description": "Cloud"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a new user",
        "description": "Add a new user to make conversions",
        "operationId": "addUser",
        "requestBody": {
          "description": "Create a new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Return a list of registered users",
        "description": "List of users that are used to make conversions",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      }
    },
    "/convert": {
      "get": {
        "tags": [
          "Conversion"
        ],
        "summary": "Make a conversion between two currencies",
        "description": "Returns a JSON containing the ID of the transaction, ID of the user who made the conversion, origin currency, target currency, converted value, conversion rate and the transaction's date.",
        "operationId": "getConversion",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "originCurrency",
            "in": "query",
            "description": "Code of the origin currency that you want to convert. Example JPY, USD, BRL.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "BRL"
            }
          },
          {
            "name": "originValue",
            "in": "query",
            "description": "This is the value you want to convert to the target currency",
            "required": true,
            "schema": {
              "type": "number",
              "example": 10.87
            }
          },
          {
            "name": "targetCurrency",
            "in": "query",
            "description": "Code of the target currency that you want to convert. Example JPY, USD, BRL.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversion"
                }
              }
            }
          },
          "400": {
            "description": "One or more parameters not filled properly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversionErrors"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Not allowed currency"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Returns the conversions made by a user",
        "description": "Returns the user's conversions",
        "operationId": "getTransactions",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of records returned",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies how many records will be skipped",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                }
              }
            }
          },
          "400": {
            "description": "User ID can't be empty or is not a integer number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversionErrors"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Conversion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "originCurrency": {
            "type": "string",
            "example": "BRL"
          },
          "originValue": {
            "type": "number",
            "example": 10.27
          },
          "targetCurrency": {
            "type": "string",
            "example": "USD"
          },
          "targetValue": {
            "type": "number",
            "example": 1.99
          },
          "conversionRate": {
            "type": "number",
            "example": 0.19
          },
          "updatedAt": {
            "type": "string",
            "format": "datetime",
            "example": "2022-12-21T20:34:27.143Z"
          },
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "example": "2022-12-21T20:34:27.143Z"
          }
        }
      },
      "Errors": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "example": ""
          },
          "msg": {
            "type": "string",
            "example": "userId cannot be empty"
          },
          "param": {
            "type": "string",
            "example": "userId"
          },
          "location": {
            "type": "string",
            "example": "query"
          }
        }
      },
      "ConversionErrors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "User": {
        "required": [
          "name",
          "e-mail"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Carter"
          },
          "email": {
            "type": "string",
            "example": "john.carter@gmail.com"
          }
        }
      },
      "Transactions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Conversion"
        }
      }
    },
    "requestBodies": {
      "User": {
        "description": "User object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    }
  }
}